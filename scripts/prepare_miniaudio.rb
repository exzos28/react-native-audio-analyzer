#!/usr/bin/env ruby

require 'fileutils'
require 'pathname'

# Get the directory where this script is located
script_dir = File.dirname(File.expand_path(__FILE__))
project_root = File.dirname(script_dir)

# Define paths
miniaudio_c_path = File.join(project_root, "libs", "miniaudio", "miniaudio.c")
miniaudio_h_path = File.join(project_root, "libs", "miniaudio", "miniaudio.h")
generated_dir = File.join(project_root, "libs", "generated")
miniaudio_m_path = File.join(generated_dir, "miniaudio.m")

puts "Preparing miniaudio for iOS..."

# Check if miniaudio.c exists
unless File.exist?(miniaudio_c_path)
  puts "Error: miniaudio.c not found at #{miniaudio_c_path}"
  exit 1
end

# Check if miniaudio.h exists
unless File.exist?(miniaudio_h_path)
  puts "Error: miniaudio.h not found at #{miniaudio_h_path}"
  exit 1
end

# Create generated directory if it doesn't exist
FileUtils.mkdir_p(generated_dir) unless Dir.exist?(generated_dir)

# Read the content of miniaudio.c
miniaudio_c_content = File.read(miniaudio_c_path)

# Create the Objective-C wrapper
miniaudio_m_content = <<~OBJC
  // Generated by prepare_miniaudio.rb
  // This file wraps miniaudio.c for iOS compatibility
  
  #import <Foundation/Foundation.h>
  
  // Include the miniaudio implementation
  #define MINIAUDIO_IMPLEMENTATION
  #include "../miniaudio/miniaudio.h"
  
  // iOS-specific initialization and exports can be added here if needed
OBJC

# Write the generated file
File.write(miniaudio_m_path, miniaudio_m_content)

puts "Generated #{miniaudio_m_path}"
puts "Miniaudio preparation completed successfully!"

# Verify the generated file
if File.exist?(miniaudio_m_path)
  puts "✓ Generated file exists and is ready for iOS compilation"
else
  puts "✗ Error: Generated file was not created"
  exit 1
end 